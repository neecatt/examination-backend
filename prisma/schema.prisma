// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//One to many with unigroup
//Later will be added quizid and result
model Student {
  id         Int      @id @default(autoincrement())
  name       String
  surname    String
  unigroup   UniGroup @relation(fields: [unigroupId], references: [id])
  unigroupId Int
}

//many to many with subjects
model Teacher {
  id        Int                 @id @default(autoincrement())
  name      String
  surname   String
  email     String              @unique
  password  String
  is_active Boolean
  Subjects  TeacherOnSubjects[]
}

//mediator table
model TeacherOnSubjects {
  Teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  @@id([teacherId, subjectId])
}

//many to many with teacher
//many to one with unigroup
model Subject {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  credit      Int
  Questions   Question[]
  Teachers    TeacherOnSubjects[]
  Unigroups   SubjectOnUnigroups[]
}

model SubjectOnUnigroups {
  Subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  Int
  UniGroup   UniGroup @relation(fields: [unigroupId], references: [id])
  unigroupId Int

  @@id([subjectId, unigroupId])
}

//many to one with subject
//one to one with answer
model Question {
  id        Int      @id @default(autoincrement())
  question  String
  OptionA   String?
  OptionB   String?
  OptionC   String?
  OptionD   String?
  OptionE   String?
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  createdAt DateTime @default(now())
  answer    String?
}

//one to one with student
//one to many with subject
model Unigroup {
  id                 Int                  @id @default(autoincrement())
  name               String
  students           Student[]
  SubjectOnUnigroups SubjectOnUnigroups[]
}

model Answer {
  id         Int     @id @default(autoincrement())
  answer     String
  is_correct Boolean
}
