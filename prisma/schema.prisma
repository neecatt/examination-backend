// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//many to many with subjects
model Teacher {
  id        Int        @id @default(autoincrement())
  name      String
  surname   String
  email     String     @unique
  password  String
  is_active Boolean?   @default(false)
  Subjects  Subject[]
  Unigroups UniGroup[]
}

//many to many with teacher
//many to one with unigroup
model Subject {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  credit      Int
  Questions   Question[]
  Teachers    Teacher[]
  Unigroups   UniGroup[]
  Quiz        Quiz[]
}

//many to one with subject
//one to one with answer
model Question {
  id        Int       @id @default(autoincrement())
  question  String
  filename  String
  url       String
  subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int?
  group     UniGroup? @relation(fields: [groupId], references: [id])
  groupId   Int?
  createdAt DateTime  @default(now())
  Options   Option[]
  Quiz      Quiz?     @relation(fields: [quizId], references: [id])
  quizId    Int?
}

model Option {
  id         Int       @id @default(autoincrement())
  option     String
  is_correct Boolean
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
}

//one to one with student
//one to many with subject
model UniGroup {
  id        Int        @id @default(autoincrement())
  name      String
  Subjects  Subject[]
  Teachers  Teacher[]
  Questions Question[]
  Quiz      Quiz[]
}

model Quiz {
  id        Int        @id @default(autoincrement())
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId Int
  group     UniGroup   @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime   @default(now())
  Questions Question[]
  Result    Result[]
}

model Result {
  id            Int      @id @default(autoincrement())
  student       String
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  quizId        Int
  scoreAchieved Int
  scoreTotal    Int
  createdAt     DateTime @default(now())
}
